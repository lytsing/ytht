  This HOWTO tells you how to configure, install and maintain Cthulhu,
  as well as how to configure CGI, Authentification and SSL.

  Report any errors you find here to <tom-cthulhu@fnord.at>

  Thank you.

  -- Thomas M. Ogrisegg

------------------------------------------------------------------------------
Table of Contents:

	1.) Configuring Cthulhu sources
	2.) Installing Cthulhu
	3.) Configuring Cthulhu
	4.) Configuring the CGI execution daemon
	5.) Configuring pathconf
	6.) Testing CGI
	7.) Configuring authentification
	8.) Configuring SSL
	9.) General information
	10.) Security considerations

------------------------------------------------------------------------------

1.) Configuring Cthulhu sources

Edit the file 'localconf' in the source directory. Adjust the values
there. Especially, you might want to change BASEDIR.

Then adjust some environment variables. Let CC point to your C-Compiler
(if your C-Compiler is called 'cc' and can be found in your PATH env-
ironment variable you do not need to do that). Second CFLAGS should be
set. If 'gcc' is your C-Compiler then I recommended to at least set it
to '-Os -fomit-frame-pointer'. Add special architecture specific opt-
imizations if you want.

After that run './configure'. It will read the data from localconf and
generate the files 'Makefile', 'config.h' and 'ctrlhulhu'.

Now run 'make'. If you should get any errors, then first look whether
your Operating system is listed to be one of the supported operating
systems. If this is the case then it's probably a problem at your site.
Please DO NOT bother me with your local, site-specific configuration problems.
If this is not the case (ie. you are running an operating system which
is not yet supported) then either take the time to port cthulhu to that
particular operating system or mail a short report to <tom-cthulhu@fnord.at>.


2.) Installing Cthulhu:

Simply type 'make install'. If you should get any errors here, then please
immediately send a bug report to <tom-cthulhu@fnord.at> with an _exact_
problem description (Output of 'make' + Operating System type and version +
additional information you consider helpful).

Please note that it's also strongly recommended to install ipinit. It will
also be used later in this howto. You can get ipinit from:

		http://fnord.at/sw/ipinit/

Now you must add some a user called 'cthulhu' to your /etc/passwd file.
The rest of this howto assumes that the cthulhu user has an uid 23 and
a gid of 80. The group has to be called 'www'.

You should also have an individual user for ctauth and http-ssl if you
plan to use these programs.


3.) Configuring Cthulhu:

The next part will assume that Cthulhu was installed under /var/cthulhu.

# cd /var/cthulhu

If /var/cthulhu is not yet owned by the user cthulhu (which you should have
previously added to /etc/passwd) then run

# chown cthulhu .
# chgrp www .


First you have to add a domain. We use example.org.

# mkdir example.org
# chgrp www example.org
# chown cthulhu example.org
# echo "<html><p>Congratulation. It worked</p></html>" > example.org/index.html
# bin/add_domain example.org

This will create a 'filelist-example.org' file in the base directory.

Please note that example.org does not have to be owned by 'cthulhu', but must
be readable for it.

Next we have to create an ipinit script. Edit '/var/cthulhu/control/cthulhu'
with your favourite editor.

# cat > control/cthulhu
root /var/cthulhu
server /bin/cthulhu
bind 3:tcp:0.0.0.0:80
uid 23
gid 80
cputime 100
stacksize 102400
datasize 102400
openfiles 8192
open 2>/var/cthulhu/log/errors.log
fork

#

For syntax questions consult the ipinit(8) manual ('man ipinit').
It's strongly recommended to set the openfiles limit (default: 1024) to
a high value. 8192 seems reasonable for busy sites.

In the above example, cthulhu will run in a chroot with some resource limits
set.  Adjust that, to fit your needs.

Now start cthulhu. This is best done via 'ctrlhulhu'.

# bin/ctrlhulhu start

Alternatively via

# ipinit control/cthulhu -i

Cthulhu should now be listening on port 80. If your DNS is properly configured
you can now start your browser and point it to 'http://example.org/'. It should
give you the file ('index.html') we just created above.

You can now add more files to your domain. Remember to run 'add_domain'
after every change if you want to cache the whole domain (generally it's
recommended to cache all often-used files, like index.html, etc.).

If you only want a file-only serving server, you're already done.


4.) Configuring the CGI execution daemon

If you need CGI support you have to first configure the CGI execution
daemon.

First edit /var/cthulhu/control/cgi-exec.

# cat > control/cgi-exec
server /var/cthulhu/bin/cgi-exec
cwd /var/cthulhu
bind 0:unix:/var/cthulhu/dev/cgi:23:80
open 2>/var/cthulhu/log/cgi-exec
fork

#

If you want to use the cgi-exec daemon for all domains, then you may
not set the 'uid' ipinit parameter. It's recommended to use UNIX sockets
instead of INTERNET sockets (except if you want the target programs be
executed on another machine) because most UNIX sockets implementations are
much faster than their INTERNET pendants.

Please note that the uid and gid that the socket should have, must be
specified behind the pathname of the 'bind' line.

Now start the cgi-exec daemon.

# ipinit control/cgi-exec

Note: If ctrlhulhu finds a control/cgi-exec file it will automatically start
cgi-exec.


5.) Configuring pathconf (CGI/FastCGI)

To enable CGI, FastCGI etc. you have to edit the pathconf-<domain>
file. In this file several parameters for a domain are specified.

For example to make any request to /cgi-bin/ be interpreted as a CGI
request, you must add the line

/cgi-bin/*	cgi		$	/dev/cgi

[Please note: We use /dev/cgi here because we have previously configured cthulhu
 to run in a chroot. If cthulhu wouldn't run in a chroot, we obviously would
 have to use /var/cthulhu/dev/cgi]

The first token is a wildcard and means 'any program in /cgi-bin/'. The second
token specifies the type. This is one of { cgi, fcgi, auth, fcgi-auth, filter,
fcgi-filter, redir, rewrite }.

The third token may be either the pathname of an interpreter or '$' which
means to execute the actual program.
The fourth token is a socket specification and might either be an internet
address in the format '<address>:<port>' or a UNIX socket path in the format
'/path/to/unix-socket' and means that Cthulhu should connect to this socket
to let the program listening on this socket (e.g. the cgi-exec daemon) satisfy
the request

The meaning of the different type tokens:

cgi  - execute over cgi-exec daemon
fcgi - retrieve the data via a FastCGI interface
auth - Authenticate via Cthulhu authentification daemon
fcgi-auth - Authenticate via FastCGI Authentification daemon
filter - currently unimplemented
fcgi-filter - currently unimplemented
redir - redirect the HTTP client to another url
rewrite - internally rewrite the URL.

The exact meaning of these tokens will be described later.

Please remember to run 'ctrlhulhu reinit' after every pathconf change so
that new settings will be taken into effect.


6.) Testing CGI

Now that you have configured CGI, you can test it by first creating a
CGI shell script. E.g.

$ cat > example.org/cgi-bin/test-cgi
#!/bin/sh

echo "Content-Type: text/html"
echo ""

echo "CGI works fine."

$ chmod +x example.org/cgi-bin/test-cgi

Now point your webbrowser to 'http://example.org/cgi-bin/test-cgi'. If
it doesn't work then check the error code of Cthulhu. If it's a
"500 Internal server error", the logfiles will tell you more. Otherwise
it's probably not a problem of Cthulhu.

To let some CGI scripts be executed with a different working directory or
a differen root directory you have to edit

/var/cthulhu/config/cgi-exec/<domain>

The lines in these files are simply
'<program-wildcard>:<working directory>:<root directory>'

Just leave unspecified fields blank.

For example to execute the above in the directory /var/cgi you would write

/cgi-bin/test-cgi:/var/cgi:

To execute all programs in /cgi-bin/ with the root directory set to /altroot
you would write:

/cgi-bin/*::/altroot


7.) Configuring authentification

If you do not want to allow users to view some or all of your pages without
proper authentification you can use Basic-Web-Authentification.

First of all you have to configure the ctauth(8) daemon. Like all previous
examples you have to edit the ipinit control file for ctauth.

# cat > control/ctauth
server /var/cthulhu/bin/ctauth
cwd /var/cthulhu/config/ctauth/
bind 0:unix:/var/cthulhu/dev/auth
uid 123
gid 456
open 2>/var/cthulhu/log/auth.log
fork

#

It's generally recommended to run the ctauth daemon in a chroot.

Now start the ctauth daemon:

# ipinit control/ctauth

ctauth will automatically be started by ctrlhulhu if it detects a control/ctauth
file.

Let's assume you do not want users to access the files below /secret/area/
With Cthulhu it works like this: First edit pathconf-example.org.

Add the following line:

/secret/area/*	auth	"This is a protected area"	/dev/auth

Then you must add users which are allowed to login.

Let's add the user 'tom' with the password 'hehe'.

$ echo "tom:hehe" >> config/auth/example.org
$

Now point your webbrowser to 'http://example.org/secret/area/' and try
to authenticate yourself. If you get a "500 Internal Server" error this
probably means that Cthulhu couldn't connect to it's authenfication daemon.
Consult the logfiles for more information.

Please note: Do not use authentification for normal - insecure - sockets.
All passwords will be transmitted in plain text (ie. encoded in BASE64 -
but that's not secure) and can thus be sniffed by everybody. Use these
authentification mechanisms only in conjunction with SSL.


8.) Configuring SSL

SSL communication is done via the http-ssl daemon. See the man page for
further details.

Again you have to create a control file for ipinit.

# cat > control/http-ssl
root /var/cthulhu/ssl
server http-ssl
bind 0:tcp:0.0.0.0:443
uid 65535
gid 65535
open 2>/var/cthulhu/log/http-ssl.log
fork

#

It is STRONGLY recommended to run http-ssl in a chroot. The OpenSSL library
(which is beeing used by http-ssl) often had bugs and security holes.

As http-ssl is, by default, installed in /var/cthulhu/bin you will have
to create a hard link if you want to run it in a chroot (and you want -
trust me):

# mkdir ssl
# ln bin/http-ssl ssl/http-ssl

Now you also need to copy a certificate file. If you do not yet have one,
you will need to generate one with any of the tools supplied with the
OpenSSL library.

# cp <certificatefile> ssl/http-ssl.pem

Please note that http-ssl will fork a new process for every request it
receives.

Now start the http-ssl process.

# ipinit control/http-ssl -m 128

The parameter (-m) tells http-ssl to not accept more than 128 connections.
Default is 0, so you MUST set this parameter or else http-ssl will not
accept any connections at all. Do not set this parameter too high, or else
it will be easy to run a Denial Of Service attack against your server as
http-ssl needs to fork for every connection.

Now it should already work. Point your webbrowser to 'https://example.org/'
and see whether it works.


9.) General information and notes

If you change a pathconf-* or filelist-* file, or add a new domain,
you must either send the cthulhu process a SIGHUP signal, or better run
'ctrlhulhu reinit' from the command line.

Please remember to link servers statically or at least provide a library
environment when you run them in a chroot, else they won't work and ipinit
does not alway give you accurate error output (that it didn't work. Look
at the logfiles in log/ if you have problems).

manpages are included in the source distribution. Either install them in
your manpath, or view them manually. Viewing them manually should normally
work like this:

$ nroff -man man/$MANPAGE.[0-8] | more


10.) Security considerations

To protect against Denial of Service attacks, you can edit 'localconf'
in the source directory. There are some parameters which you may want
to adjust MAXCONNS is the maximum number of connections one host may
simultaneously maintain with your server. Setting this to 0 means un-
limited. Recommended value: 10. This means that someone who wants to
run a DoS attack against you must have at least 100 hosts to have 1000
connections open. And Cthulhu will still run without problems...

Second parameter: MAXPOSTS. This specifies the number of simultaneous
POST requests one host may issue. 3 seems to be a reasonable value. If
an attacker wants to create 1000 Processes on your webserver she would
have to have control of over 300 hosts.

Third parameter: TIMEOUT. Time after which an idle connection times out.
30 seconds seems to be reasonable even over very slow connections. 120
is default. Please note that with CGI/FastCGI and Authentification daemons,
the daemon may also timeout the connection. This means, that if a daemon
is idle for the period specified by timeout, the connection will be shut-
down. Keep this in mind, before you set the value too low.
